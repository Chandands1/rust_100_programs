// --- Project Setup (Terminal Commands) ---

// 1. Create a new Cargo project (this creates the standard directory structure)
// cargo new my_cargo_app
// cd my_cargo_app

// 2. The project structure will look like this:
// my_cargo_app/
// ├── Cargo.toml
// └── src/
//     └── main.rs

// --- Cargo.toml (Content) ---
// This file is automatically generated by `cargo new`.
// You can add dependencies here, e.g., if you used `instant` crate earlier.

/*
[package]
name = "my_cargo_app"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
// instant = "0.1" // Example of adding a dependency
*/

// --- src/main.rs (Content) ---
// This file is automatically generated by `cargo new`.

fn main() {
    println!("Hello, Cargo project!");
    println!("This is a standard Rust application.");
    println!("To build: `cargo build`");
    println!("To run: `cargo run`");
    println!("To build release version: `cargo build --release`");
    println!("To run tests: `cargo test`");
}

// --- Building and Running (Terminal Commands) ---

// 3. Build the project (creates an executable in `target/debug/`)
// cargo build

// 4. Run the project (compiles if necessary, then executes)
// cargo run

// 5. Build for release (optimized build, creates executable in `target/release/`)
// cargo build --release

// 6. Run the release version
// cargo run --release

// 7. Run tests (if you have tests defined in `src/main.rs` or `src/lib.rs` and modules)
// cargo test

// 8. Clean the project (removes `target` directory)
// cargo clean